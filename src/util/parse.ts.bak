import moment, { Moment } from 'moment';
import geoTz from 'geo-tz';
import 'moment-timezone';
import 'moment-precise-range-plugin';
import config from '../config.json';
import client from '../Bot';
import { MessageEmbed } from 'discord.js';
import countryFlagEmoji from 'country-flag-emoji';
import nearbyCities from 'nearby-cities';
import { stripIndents } from 'common-tags';
import proto from './en.json';

const masterfile = require('../util/masterfile.json');
const util = require('../util/util.json');
const boosted = {
  'partly cloudy': ['Normal', 'Rock'],
  cloudy: ['Fairy', 'Fighting', 'Poison'],
  fog: ['Dark', 'Ghost'],
  rain: ['Water', 'Electric', 'Bug'],
  snow: ['Ice', 'Steel'],
  sunny: ['Grass', 'Ground', 'Fire'],
  clear: ['Grass', 'Ground', 'Fire'],
  windy: ['Dragon', 'Flying', 'Psychic'],
};

// function to get custom discord emoji string from its name
const emoji = (name: string) => {
  try {
    return client.emojis.cache.find((emoji) => emoji.name === name).toString();
  } catch (e) {
    return name;
  }
};

export function parsePokemon(
  pokemon,
  guildId: string,
  webhook: boolean,
  distanceFromPrevious?: number
): {
  embed: MessageEmbed;
  coordinates: number[];
} {
  let {
    pokemon_id,
    cp,
    capture_1,
    capture_2,
    capture_3,
    pokemon_level,
    move_1,
    move_2,
    gender,
    latitude,
    longitude,
    individual_attack,
    individual_defense,
    individual_stamina,
    disappear_time,
    pvp_rankings_great_league,
    pvp_rankings_ultra_league,
    weather,
    iv,
    pokestop,
  } = pokemon;
  const pokemonData = masterfile.pokemon['' + pokemon_id];

  // calculating time when pokemon expires and remaining time until pokemon expires
  const dissapearTime = moment
    .utc(disappear_time * 1000)
    .tz(geoTz(latitude, longitude).toString());
  const now = moment
    .utc(moment.now())
    .tz(geoTz(latitude, longitude).toString());
  const duration = moment.preciseDiff(dissapearTime, now);

  // looking up city, country and emoji location data
  const city = nearbyCities({
    latitude: latitude,
    longitude: longitude,
  })[0];
  const locationEmoji = countryFlagEmoji.get(city.country);

  // calculating iv
  if (!iv)
    if (
      individual_attack !== null &&
      individual_defense !== null &&
      individual_stamina !== null
    )
      iv = (
        ((individual_attack + individual_defense + individual_stamina) / 45) *
        100
      ).toFixed(1);

  const embed = client.embed(guildId);
  if (!webhook)
    embed.setTitle(
      `${pokemonData ? pokemonData.name : ''} ${latitude.toFixed(
        5
      )},${longitude.toFixed(5)}`
    );
  if (pokemonData && pokemonData.types)
    embed.setColor(`#${util.types[pokemonData.types[0]].color.toString(16)}`);
  if (pokemonData)
    embed.setThumbnail(
      `https://play.pokemonshowdown.com/sprites/xyani/${pokemonData.name
        .toLowerCase()
        .split(' ')
        .join('')}.gif`
    );
  embed.setDescription(
    // line 1: name and gender
    `${pokemonData ? '**' + pokemonData.name + '**' : ''} ${
      gender
        ? config.genderEmojis
          ? emoji(config.genderEmojis['' + gender])
          : gender === 1
          ? ':male_sign:'
          : gender === 2
          ? ':female_sign:'
          : gender === 3
          ? 'genderless âš§'
          : ''
        : ''
    } ` +
      // actual line 2: location: emoji flag and city, country
      `${locationEmoji.emoji} ${city.name}, ${locationEmoji.name}\n` +
      // line 2: despawn time and time remaining
      `**Despawn:** ${dissapearTime.format(
        'hh:mm:ss A'
      )} (${duration} left)\n` +
      // line 3: cp, iv, and lv
      (cp !== null && iv !== null && pokemon_level !== null
        ? `${emoji(emoji(config.statsEmojis.cp))} ${cp} ${emoji(
            emoji(config.statsEmojis.iv)
          )} ${iv}% ${
            individual_attack !== null &&
            individual_defense !== null &&
            individual_stamina !== null
              ? `(${individual_attack}/${individual_defense}/${individual_stamina}) `
              : ''
          } ${emoji(emoji(config.statsEmojis.level))} ${pokemon_level}\n`
        : '') +
      // line 4: types and weather
      (pokemonData && pokemonData.types
        ? `**Types:** ${pokemonData.types
            .map((type) =>
              config.typeEmojis
                ? emoji(config.typeEmojis[type])
                : util.types[type].emoji
            )
            .join(' ')} `
        : '') +
      `${
        weather !== 0 && weather
          ? config.weatherEmojis
            ? '| **Weather:** ' + emoji(config.weatherEmojis['' + weather])
            : '| **Weather:** ' + util.weather['' + weather].emoji
          : ''
      } ${
        weather !== 0 && weather && util.weather['' + weather]
          ? '(' + util.weather['' + weather].name + ')'
          : ''
      }` +
      (pokemonData && pokemonData.types
        ? `${
            weather !== 0 &&
            pokemonData.types.some((type) =>
              boosted[util.weather[weather].name].includes(type)
            )
              ? '(boosted)'
              : ''
          }
        `
        : '') +
      // line 5: moveset
      (move_1 !== null && move_2 !== null
        ? `${emoji(emoji(config.statsEmojis.moveset))} ${
            masterfile.moves['' + move_1].name
          }/${masterfile.moves['' + move_2].name}\n`
        : '') +
      // line 6: capture %s
      (capture_1 !== null && capture_2 !== null && capture_3 !== null
        ? `${emoji(config.captureEmojis['1'])} ${(capture_1 * 100).toFixed(
            2
          )}% ${emoji(config.captureEmojis['2'])} ${(capture_2 * 100).toFixed(
            2
          )}% ${emoji(config.captureEmojis['3'])} ${(capture_3 * 100).toFixed(
            2
          )}%\n`
        : '') +
      // line 7: pokestop
      (pokestop
        ? `**Near Pokestop:** [${
            pokestop.dataValues.name ? pokestop.dataValues.name : ''
          }](${
            pokestop.dataValues.url
          }) [**[Coords](https://www.google.com/maps?q=${
            pokestop.dataValues.lat
          },${pokestop.dataValues.lon})**]\n`
        : '') +
      // remaining lines: pvp data
      `${
        (pvp_rankings_great_league && pvp_rankings_great_league !== []) ||
        (pvp_rankings_ultra_league && pvp_rankings_ultra_league !== [])
          ? '**__PvP Rank Statistics__**'
          : ''
      }${
        // great league pvp data
        pvp_rankings_great_league && pvp_rankings_great_league !== []
          ? '\n' +
            emoji(config.leagueEmojis['great']) +
            '**Great League**:\n' +
            pvp_rankings_great_league
              .map((ranking, index) => {
                const p = masterfile.pokemon[ranking.pokemon];
                return (
                  (ranking.rank ? 'Rank #' + ranking.rank : '') +
                  (p && p.name ? ' ' + p.name : '') +
                  (ranking.cp ? ' ' + ranking.cp + 'CP @L' : '') +
                  (ranking.level ? ranking.level + ' ' : '') +
                  (ranking.percentage
                    ? (ranking.percentage * 100).toFixed(2) + '%'
                    : '') +
                  (index === pvp_rankings_great_league.length - 1 ? '' : '\n')
                );
              })
              .join('')
          : ''
      }${
        // ultra league pvp data
        pvp_rankings_ultra_league && pvp_rankings_ultra_league !== []
          ? '\n' +
            emoji(config.leagueEmojis['ultra']) +
            '**Ultra League**:\n' +
            pvp_rankings_ultra_league
              .map((ranking, index) => {
                const p = masterfile.pokemon[ranking.pokemon];
                return (
                  (ranking.rank ? 'Rank #' + ranking.rank : '') +
                  (p && p.name ? ' ' + p.name : '') +
                  (ranking.cp ? ' ' + ranking.cp + 'CP @L' : '') +
                  (ranking.level ? ranking.level + ' ' : '') +
                  (ranking.percentage
                    ? (ranking.percentage * 100).toFixed(2) + '%'
                    : '') +
                  (index === pvp_rankings_ultra_league.length - 1 ? '' : '\n')
                );
              })
              .join('')
          : ''
      }${
        distanceFromPrevious
          ? `\n**Distance From Previous**: ${distanceFromPrevious}`
          : ''
      }
          [**[${latitude.toFixed(5)},${longitude.toFixed(
        5
      )}](https://www.google.com/maps?q=${latitude},${longitude})**]
      `
  );
  return { embed: embed, coordinates: [latitude, longitude] };
}

export async function parseShinyPokemon(pokemon, guildId: string) {
  let {
    pokemon_id,
    cp,
    pokemon_level,
    latitude,
    longitude,
    individual_attack,
    individual_defense,
    individual_stamina,
    username,
    move_1,
    move_2,
    disappear_time,
  } = pokemon;
  const iv = (
    ((individual_attack + individual_defense + individual_stamina) / 45) *
    100
  ).toFixed(1);
  const pokemonData = masterfile.pokemon['' + pokemon_id];
  const user = config.shinyMentions[username];
  const member = await client.guilds.cache
    .get(guildId)
    .members.fetch(user.substring(2, user.length - 1));

  // calculating time when pokemon expires and remaining time until pokemon expires
  const dissapearTime = moment
    .utc(disappear_time * 1000)
    .tz(geoTz(latitude, longitude).toString());
  const now = moment
    .utc(moment.now())
    .tz(geoTz(latitude, longitude).toString());
  const duration = moment.preciseDiff(dissapearTime, now);

  const embed = client.embed(guildId);
  if (pokemonData && pokemonData.types)
    embed.setColor(`#${util.types[pokemonData.types[0]].color.toString(16)}`);
  embed
    .setAuthor(`${member.user.username} found shiny ${pokemonData.name}`)
    .setThumbnail(
      `https://play.pokemonshowdown.com/sprites/xyani/${pokemonData.name
        .toLowerCase()
        .split(' ')
        .join('')}.gif`
    )
    .setDescription(
      stripIndents`${emoji(config.statsEmojis.shiny.cp)} ${cp} ${emoji(
        config.statsEmojis.shiny.iv
      )} ${iv} ${emoji(
        config.statsEmojis.shiny.level
      )} ${pokemon_level} ${emoji(config.statsEmojis.shiny.shiny)}
    ${emoji(config.statsEmojis.shiny.moveset)} ${
        masterfile.moves['' + move_1].name
      } | ${masterfile.moves['' + move_2].name}
      ${emoji(config.statsEmojis.shiny.despawn)} ${duration}
      ${emoji(
        config.statsEmojis.google
      )} [[**Google**](https://www.google.com/maps?q=${latitude},${longitude})] ${emoji(
        config.statsEmojis.ipogo
      )} [[**iPogo**](https://ipogo.app/?coords=${latitude},${longitude})]`
    );

  return {
    embed: embed,
    message: `${latitude.toFixed(5)},${longitude.toFixed(5)} | ${user} | ${
      masterfile.pokemon[pokemon_id].name
    }`,
    shiny: true,
    user: user,
  };
}

export function parsePokemonDb(
  pokemon,
  guildId: string,
  webhook: boolean
): MessageEmbed {
  pokemon.dataValues.pokemon_level = pokemon.dataValues.level;
  pokemon.dataValues.latitude = pokemon.dataValues.lat;
  pokemon.dataValues.longitude = pokemon.dataValues.lon;
  pokemon.dataValues.individual_attack = pokemon.dataValues.atk_iv;
  pokemon.dataValues.individual_defense = pokemon.dataValues.def_iv;
  pokemon.dataValues.individual_stamina = pokemon.dataValues.sta_iv;
  pokemon.dataValues.disappear_time = pokemon.dataValues.expire_timestamp;
  pokemon.dataValues.pvp_rankings_great_league = JSON.parse(
    pokemon.dataValues.pvp_rankings_great_league
  );
  pokemon.dataValues.pvp_rankings_ultra_league = JSON.parse(
    pokemon.dataValues.pvp_rankings_ultra_league
  );
  return parsePokemon(pokemon.dataValues, guildId, webhook).embed;
}
export function parseNestDb(nest): Object {
  const { lat, lon } = nest;
  const city = nearbyCities({ latitude: lat, longitude: lon })[0];
  const emoji = countryFlagEmoji.get(city.country);
  return {
    value: stripIndents`${emoji.emoji} ${city.name}, ${emoji.name}
    [**[${lat.toFixed(5)},${lon.toFixed(
      5
    )}](https://www.google.com/maps?q=${lat},${lon})**]`,
  };
}
export function parseQuestDb(quest): Object {
  const { lat, lon, quest_type, quest_target } = quest;
  const city = nearbyCities({ latitude: lat, longitude: lon })[0];
  const emoji = countryFlagEmoji.get(city.country);
  return {
    value: stripIndents`Type: **${masterfile.quest_types[quest_type + ''].text
      .split('{0}')
      .join(quest_target)}**
    ${emoji.emoji} ${city.name}, ${emoji.name}
    [**[${lat.toFixed(5)},${lon.toFixed(
      5
    )}](https://www.google.com/maps?q=${lat},${lon})**]`,
  };
}
export function parseRaid(
  raid,
  guildId: string,
  webhook: boolean,
  distanceFromPrevious: number
): {
  embed: MessageEmbed;
  coordinates: number[];
} {
  let {
    gym_name,
    latitude,
    move_1,
    gender,
    gym_url,
    level,
    end,
    cp,
    longitude,
    pokemon_id,
    team_id,
    move_2,
    ex_raid_eligible,
  } = raid;

  const pokemonData = masterfile.pokemon['' + pokemon_id];

  // calculating time when pokemon expires and remaining time until pokemon expires
  const dissapearTime = moment
    .utc(end * 1000)
    .tz(geoTz(latitude, longitude).toString());
  const now = moment
    .utc(moment.now())
    .tz(geoTz(latitude, longitude).toString());
  const duration = moment.preciseDiff(dissapearTime, now);

  // looking up city, country and emoji location data
  const city = nearbyCities({
    latitude: latitude,
    longitude: longitude,
  })[0];
  const locationEmoji = countryFlagEmoji.get(city.country);

  const embed = client.embed(guildId);
  if (pokemonData && pokemonData.types)
    embed.setColor(`#${util.types[pokemonData.types[0]].color.toString(16)}`);
  embed
    .setURL(gym_url)
    .setThumbnail(
      `https://play.pokemonshowdown.com/sprites/xyani/${pokemonData.name
        .split(' ')
        .join('')
        .toLowerCase()}.gif`
    )
    .setAuthor(gym_name, gym_url)
    .setDescription(
      // line 1: name and gender
      (pokemonData
        ? `**${pokemonData.name}** ` +
          (gender
            ? `${
                config.genderEmojis
                  ? emoji(config.genderEmojis['' + gender])
                  : gender === 1
                  ? ':male_sign:'
                  : gender === 2
                  ? ':female_sign:'
                  : gender === 3
                  ? 'genderless âš§'
                  : ''
              }\n`
            : '')
        : '') +
        // actual line 2: location: emoji flag and city, country
        `${locationEmoji.emoji} ${city.name}, ${locationEmoji.name}\n` +
        // line 2: moveset
        (move_1 !== null &&
        move_2 !== null &&
        masterfile.moves['' + move_1] &&
        masterfile.moves['' + move_2]
          ? `${emoji(config.statsEmojis.moveset)} ${
              masterfile.moves['' + move_1].name
            }/${masterfile.moves['' + move_2].name}\n`
          : '') +
        // line 3: cp, ending time, and time remaining
        (cp !== null ? `${emoji(config.statsEmojis.cp)} ${cp} | ` : '') +
        `**Ends At:** ${dissapearTime.format(
          'hh:mm:ss A'
        )} (${duration} left)\n` +
        // line 4: types
        (pokemonData && pokemonData.types
          ? `**Types:** ${pokemonData.types
              .map((type) =>
                config.typeEmojis
                  ? emoji(config.typeEmojis[type]) +
                    ' (**Weaknesses**: ' +
                    util.typeWeaknesses[type].weaknesses
                      .map((weakness) => emoji(config.typeEmojis[weakness]))
                      .join(' ') +
                    ')'
                  : util.types[type].emoji
              )
              .join(', ')}\n`
          : '') +
        // line 5: level, team, and ex eligibility
        (level ? `**Level:** ${level} | ` : '') +
        (team_id
          ? `${emoji(config.teamEmojis[util.teams['' + team_id].name])} `
          : '') +
        `${ex_raid_eligible ? emoji('ex') : ''} Gym\n` +
        (distanceFromPrevious
          ? `**Distance From Previous**: ${distanceFromPrevious}\n`
          : '') +
        `[**[${latitude.toFixed(5)},${longitude.toFixed(
          5
        )}](https://www.google.com/maps?q=${latitude},${longitude})**]`
    );
  return { embed: embed, coordinates: [latitude, longitude] };
}

export function parseRaidDb(raid, guildId: string): MessageEmbed {
  raid.dataValues.gym_name = raid.dataValues.name;
  raid.dataValues.latitude = raid.dataValues.lat;
  raid.dataValues.longitude = raid.dataValues.lon;
  raid.dataValues.move_1 = raid.dataValues.raid_pokemon_move_1;
  raid.dataValues.move_2 = raid.dataValues.raid_pokemon_move_2;
  raid.dataValues.gender = raid.dataValues.raid_pokemon_gender;
  raid.dataValues.gym_url = raid.dataValues.url;
  raid.dataValues.level = raid.dataValues.raid_level;
  raid.dataValues.end = raid.dataValues.raid_end_timestamp;
  raid.dataValues.cp = raid.dataValues.raid_pokemon_cp;
  raid.dataValues.pokemon_id = raid.dataValues.raid_pokemon_id;
  return parseRaid(raid.dataValues, guildId, true, null).embed;
}

export function parseQuest(
  quest,
  guildId: string,
  webhook: boolean,
  expiryDate: number
): {
  embed: MessageEmbed;
  coordinates: number[];
} {
  let {
    latitude,
    longitude,
    type,
    pokestop_name,
    pokestop_url,
    rewards,
  } = quest;

  const questData = masterfile.grunt_types[type + ''];
  let dissapearTime: Moment, now: Moment, duration: string;
  if (expiryDate) {
    dissapearTime = moment
      .utc(expiryDate * 1000)
      .tz(geoTz(latitude, longitude).toString());
    now = moment.utc(moment.now()).tz(geoTz(latitude, longitude).toString());
    duration = moment.preciseDiff(dissapearTime, now);
  }

  // looking up city, country and emoji location data
  const city = nearbyCities({
    latitude: latitude,
    longitude: longitude,
  })[0];
  const locationEmoji = countryFlagEmoji.get(city.country);

  const embed = client.embed(guildId);
  if (webhook) embed.setTitle(`${city.name}: ${pokestop_name}`);
  if (questData && questData.type && util.types[questData.type])
    embed.setColor(`#${util.types[questData.type].color.toString(16)}`);
  embed.setURL(`https://www.google.com/maps?q=${latitude},${longitude})`);
  if (pokestop_url) embed.setThumbnail(pokestop_url);
  // switch(rewards[0].type) {
  //   case 2:
  //     embed.setThumbnail()
  //   break;
  //   case 3: break;
  //   case 7: break;
  // }

  embed.setDescription(
    // line 1: expiry date
    (expiryDate
      ? `**Expires**: ${dissapearTime.format(
          'hh:mm:ss A'
        )} (${duration} left)\n`
      : '') +
      // line 2: gender
      `${
        questData && questData.gender
          ? '**Gender** ' +
            (questData.gender
              ? `${
                  config.genderEmojis
                    ? emoji(config.genderEmojis['' + questData.gender])
                    : questData.gender === 1
                    ? ':male_sign:'
                    : questData.gender === 2
                    ? ':female_sign:'
                    : questData.gender === 3
                    ? 'genderless âš§'
                    : ''
                }\n`
              : '')
          : ''
      }\n` +
      // remaining lines: encounter reward chances
      (questData && questData.type
        ? `**Grunt Type:** ${
            config.typeEmojis[questData.type]
              ? emoji(config.typeEmojis[questData.type])
              : questData.type
          } **Task**: ${getQuestTask(quest)}\n`
        : '') +
      `${locationEmoji.emoji} ${city.name}, ${locationEmoji.name}\n` +
      `[**[${latitude.toFixed(5)},${longitude.toFixed(
        5
      )}](https://www.google.com/maps?q=${latitude},${longitude})**]`
  );
  return { embed: embed, coordinates: [latitude, longitude] };
}

export function parseInvasion(
  invasion,
  guildId: string,
  webhook: boolean
): {
  embed: MessageEmbed;
  coordinates: number[];
} {
  let {
    latitude,
    longitude,
    grunt_type,
    name,
    url,
    incident_expire_timestamp,
  } = invasion;

  const invasionData = masterfile.grunt_types[grunt_type + ''];
  let dissapearTime: Moment, now: Moment, duration: string;
  if (incident_expire_timestamp) {
    dissapearTime = moment
      .utc(incident_expire_timestamp * 1000)
      .tz(geoTz(latitude, longitude).toString());
    now = moment.utc(moment.now()).tz(geoTz(latitude, longitude).toString());
    duration = moment.preciseDiff(dissapearTime, now);
  }

  // looking up city, country and emoji location data
  const city = nearbyCities({
    latitude: latitude,
    longitude: longitude,
  })[0];
  const locationEmoji = countryFlagEmoji.get(city.country);

  const embed = client.embed(guildId);
  if (webhook) embed.setTitle(`${city.name}: ${name}`);
  if (invasionData && invasionData.type && util.types[invasionData.type])
    embed.setColor(`#${util.types[invasionData.type].color.toString(16)}`);
  embed.setURL(`https://www.google.com/maps?q=${latitude},${longitude})`);
  if (url) embed.setThumbnail(url);
  if (invasionData && util.gruntImages[invasionData.grunt])
    embed.setThumbnail(util.gruntImages[invasionData.grunt]);
  if (invasionData && util.gruntImages[invasionData.type])
    embed.setThumbnail(util.gruntImages[invasionData.type]);

  embed.setDescription(
    // line 1: expiry date
    (incident_expire_timestamp
      ? `**Expires**: ${dissapearTime.format(
          'hh:mm:ss A'
        )} (${duration} left)\n`
      : '') +
      // line 2: type and gender
      `${
        invasionData && invasionData.type
          ? '**Type:** ' +
            (config.typeEmojis[invasionData.type]
              ? emoji(config.typeEmojis[invasionData.type])
              : invasionData.type)
          : ''
      } ${
        invasionData && invasionData.gender
          ? '**Gender** ' +
            (invasionData.gender
              ? `${
                  config.genderEmojis
                    ? emoji(config.genderEmojis['' + invasionData.gender])
                    : invasionData.gender === 1
                    ? ':male_sign:'
                    : invasionData.gender === 2
                    ? ':female_sign:'
                    : invasionData.gender === 3
                    ? 'genderless âš§'
                    : ''
                }\n`
              : '')
          : ''
      }` +
      // remaining lines: encounter reward chances
      (invasionData && invasionData.grunt
        ? `**Grunt Type:** ${invasionData.grunt}\n`
        : '') +
      `${locationEmoji.emoji} ${city.name}, ${locationEmoji.name}\n` +
      `[**[${latitude.toFixed(5)},${longitude.toFixed(
        5
      )}](https://www.google.com/maps?q=${latitude},${longitude})**]`
  );
  return { embed: embed, coordinates: [latitude, longitude] };
}

export function getQuestTask(quest): string {
  switch (true) {
    // CATCHING SPECIFIC POKEMON
    case quest.template.indexOf('catch_specific') >= 0:
      if (quest.conditions[0].info && quest.conditions[0].info.pokemon_ids) {
        return (
          'Catch ' +
          quest.target +
          ' ' +
          masterfile.pokemon[quest.conditions[0].info.pokemon_ids[0]].name +
          '.'
        );
      }

    // CATCH POKEMON TYPES
    case quest.template.indexOf('catch_types') >= 0:
      if (
        quest.conditions[0].info &&
        quest.conditions[0].info.pokemon_type_ids
      ) {
        let catch_types = '';
        quest.conditions[0].info.pokemon_type_ids.forEach((type, index) => {
          catch_types += proto.values['poke_type_' + type] + ', ';
        });
        catch_types = catch_types.slice(0, -2);
        return 'Catch ' + quest.target + ' ' + catch_types + ' Type PokÃ©mon.';
      }

    // CATCH WEATHER BOOSTED
    case quest.template.indexOf('catch_weather') >= 0:
      return 'Catch ' + quest.target + ' Weather Boosted PokÃ©mon.';
    case quest.template.indexOf('challenge_anniversary2020_weather') >= 0:
      return 'Catch ' + quest.target + ' PokÃ©mon with Weather Boost.';
    // CATCH POKEMON OTHER
    case quest.template.indexOf('catch') >= 0:
      if (quest.conditions && quest.conditions[0]) {
        if (
          quest.conditions[0].info &&
          quest.conditions[0].info.pokemon_type_ids
        ) {
          return (
            'Catch ' +
            quest.target +
            ' ' +
            proto.values[
              'poke_type_' + quest.conditions[0].info.pokemon_type_ids[0]
            ] +
            ' Type PokÃ©mon.'
          );
        } else {
          return (
            'Catch ' +
            quest.target +
            ' ' +
            proto.values['quest_condition_' + quest.conditions[0].type] +
            ' PokÃ©mon.'
          );
        }
      } else {
        return 'Catch ' + quest.target + ' PokÃ©mon.';
      }

    // LANDING SPECIFIC THROWS
    case quest.template.indexOf('land') >= 0:
      let curveball = '',
        throw_type = '';
      if (
        proto.values['throw_type_' + quest.conditions[0].info.throw_type_id]
      ) {
        throw_type =
          proto.values['throw_type_' + quest.conditions[0].info.throw_type_id];
      }
      if (quest.template.indexOf('curve') >= 0) {
        curveball = ' Curveball';
      }
      if (quest.template.indexOf('inarow') >= 0) {
        return (
          'Perform ' +
          quest.target +
          ' ' +
          throw_type +
          curveball +
          ' Throw(s) in a Row.'
        );
      } else {
        return (
          'Perform ' +
          quest.target +
          ' ' +
          throw_type +
          curveball +
          ' Throw(s).'
        );
      }

    // COMPLETE RAIDS
    case quest.template.indexOf('raid') >= 0:
      if (!quest.conditions[0]) {
        return 'Battle in ' + quest.target + ' Raid.';
      } else if (quest.conditions[0].type == 6) {
        return 'Battle in ' + quest.target + ' Raid(s).';
      } else {
        return (
          'Win ' +
          quest.target +
          ' Level ' +
          quest.conditions[0].info.raid_levels +
          ' Raid(s).'
        );
      }

    // SEND GIFTS TO FRIENDS
    case quest.template.indexOf('gifts') >= 0:
      return 'Send ' + quest.target + ' Gift(s) to Friends.';
    case quest.template.indexOf('challenge_anniversary2020_gift') >= 0:
      return 'Send ' + quest.target + ' Gift to a Friend.';
    // GYM BATTLING
    case quest.template.indexOf('gym_easy') >= 0:
    case quest.template.indexOf('gym_try') >= 0:
      return 'Battle ' + quest.target + ' Time(s) in a Gym.';
    case quest.template.indexOf('gym_win') >= 0:
      return 'Win ' + quest.target + ' Gym Battle(s).';

    // CATCH WITH PINAP
    case quest.template.indexOf('berry_pinap') >= 0:
      return 'Catch ' + quest.target + ' PokÃ©mon With a Pinap Berry.';

    // CATCH WITH NANAB
    case quest.template.indexOf('t2_2019_berry_nanab_pkmn') >= 0:
      return 'Catch ' + quest.target + ' PokÃ©mon With a Nanab Berry.';
    case quest.template.indexOf('t3_2019__berry_nanab_pkmn') >= 0:
      return 'Use ' + quest.target + ' Nanab berry to help catch PokÃ©mon.';

    // CATCH WITH RAZZ
    case quest.template.indexOf('berry_razz') >= 0:
      return 'Catch ' + quest.target + ' PokÃ©mon With a Razz Berry.';

    // CATCH WITH ANY BERRY
    case quest.template.indexOf('berry_easy') >= 0:
      return 'Catch ' + quest.target + ' PokÃ©mon With a Razz Berry.';
    case quest.template.indexOf('challenge_berry_moderate') >= 0:
      return 'Catch ' + quest.target + ' PokÃ©mon With Any Berry.';
    case quest.template.indexOf('challenge_anniversary2020_berry') >= 0:
      return 'Use ' + quest.target + ' berries to help catch PokÃ©mon.';
    // HATCH EGGS
    case quest.template.indexOf('hatch') >= 0:
      if (quest.target > 1) {
        return 'Hatch ' + quest.target + ' Eggs.';
      } else {
        return 'Hatch ' + quest.target + ' Egg.';
      }

    // SPIN POKESTOPS
    case quest.template.indexOf('spin') >= 0:
      return 'Spin ' + quest.target + ' PokÃ©stops.';

    // EVOLVE POKEMON
    case quest.template.indexOf('evolve_specific_plural') >= 0:
      let quest_pokemon = '';
      for (let p = 0; p < quest.conditions[0].info.pokemon_ids.length; p++) {
        quest_pokemon =
          masterfile.pokemon[quest.conditions[0].info.pokemon_ids[p]].name +
          ', ';
      }
      quest_pokemon = quest_pokemon.slice(0, -2);
      return 'Evolve a ' + quest_pokemon;
    case quest.template.indexOf('evolve_item') >= 0:
      return 'Evolve ' + quest.target + ' PokÃ©mon with an Evolution Item.';
    case quest.template.indexOf('evolve') >= 0:
      return 'Evolve ' + quest.target + ' PokÃ©mon.';

    // BUDDY TASKS
    case quest.template.indexOf('buddy') >= 0:
      return 'Get ' + quest.target + ' Candy from Walking a PokÃ©mon Buddy.';
    case quest.template.indexOf('feed_treat') >= 0:
      return 'Give your buddy 3 treats';

    // POWER UP POKEMON
    case quest.template.indexOf('powerup') >= 0:
      return 'Power Up ' + quest.target + ' PokÃ©mon.';
    case quest.template.indexOf('challenge_mega_energy_power_up') >= 0:
      return 'Power Up a PokÃ©mon 5 times.';

    // TRADE POKEMON
    case quest.template.indexOf('trade') >= 0:
      return 'Perform ' + quest.target + ' Trade(s) with a Friend.';

    // TRANSFER POKEMON
    case quest.template.indexOf('transfer') >= 0:
      return 'Transfer ' + quest.target + ' PokÃ©mon.';

    // USE SPECIFIC CHARGE MOVES
    case quest.template.indexOf('charge') >= 0:
      if (quest.target > 1) {
        return 'Use a Super Effective Charge Move ' + quest.target + ' Times.';
      } else {
        return 'Use a Super Effective Charge Move ' + quest.target + ' Time.';
      }

    // SNAPSHOTS
    case quest.template.indexOf('snapshot_easy') >= 0:
      if (quest.conditions[0].info && quest.conditions[0].info.pokemon_ids) {
        return (
          'Take ' +
          quest.target +
          ' Snapshots of ' +
          masterfile.pokemon[quest.conditions[0].info.pokemon_ids[0]].name
        );
      }

    // PvP
    case quest.template.indexOf('pvp_participate_hard') >= 0:
      return 'Win ' + quest.target + ' PvP Battles';
    case quest.template.indexOf('gbl_win') >= 0:
      return 'Win in the Go Battle League';
    case quest.template.indexOf('challenge_megasept2020_battle_energy') >= 0:
      return 'Battle another trainer';

    // PvE
    case quest.template.indexOf('pve_participate_medium') >= 0:
      return 'Battle a team leader ' + quest.target + ' times';

    // TEAM ROCKET (HALLOWEEN 2019)
    case quest.template.indexOf('rocket') >= 0:
      return 'Defeat a Team GO Rocket Grunt';

    // CATCH MISSING QUESTS
    default:
      console.error(
        'NO CASE FOR THIS QUEST (' + quest.pokestop_id + ')',
        quest
      );
      return 'NO CASE FOR THIS QUEST';
  }
}
